"Represents column"
type Column {
    "UUID"
    uuid: UUID!

    "Display name"
    name: String

    "Order in which to display the column"
    order: Int!

    "Column type"
    type: ColumnType

    "Description as plain text"
    description: String

    "Contained cards"
    cards: [Card!]!
}

"Type of the column, used for burnout chart calculations"
enum ColumnType {
    "Cards in this column are considered as not being worked on"
    todo

    "Cards in this column are considered as being worked on"
    in_progress

    "Cards in this column are considered as finished"
    done
}


"Column-specific mutations"
type ColumnMutation {
    "Create column"
    create(
        "Column UUID"
        uuid: UUID!

        "Display name"
        name: String

        "Column type"
        type: ColumnType

        "Description as plain text"
        description: String
    ): Column!

    "Update column"
    update(
        "Column UUID"
        uuid: UUID!

        "New display name"
        name: String

        "New order in which to display the column"
        order: Int

        "New column type"
        type: ColumnType

        "New description as plain text"
        description: String!
    ): Column!

    "Add card"
    add_card(
        "Card UUID"
        uuid: UUID!
    ): Column!

    "Remove card"
    remove_card(
        "Card UUID"
        uuid: UUID!
    ): Column!
}
"Represents basic interface for a card"
interface ICard {
    "UUID"
    uuid: UUID!

    "Display name"
    name: String

    "Card description as Markdown"
    description: String

    "Assigned story points"
    story_points: Int

    "Creation time"
    created: DateTime!

    "Order in column"
    order: Int!

    "Assigned users"
    assignees: [User!]!

    "Deadline"
    deadline: DateTime

    "Assigned tags"
    tags: [Tag!]!

    "Assigned milestone"
    milestone: Milestone

    "Assigned column"
    column: Column
}

"Basic card"
type Card implements ICard{
    "UUID"
    uuid: UUID!

    "Display name"
    name: String

    "Card description as Markdown"
    description: String

    "Assigned story points"
    story_points: Int

    "Creation time"
    created: DateTime!

    "Order in column"
    order: Int!

    "Assigned users"
    assignees: [User!]!

    "Deadline"
    deadline: DateTime

    "Assigned tags"
    tags: [Tag!]!

    "Assigned milestone"
    milestone: Milestone

    "Assigned column"
    column: Column
}

"Card-specific mutations"
type CardsMutation {
    "Create card"
    create(
        "Display name"
        name: String

        "Card description as Markdown"
        description: String

        "Assigned story points"
        story_points: Int

        "Assigned user UUIDs"
        assignee_uuids: [UUID!]

        "Deadline"
        deadline: DateTime

        "Assigned tag UUIDs"
        tag_uuids: [UUID!]

        "Assigned milestone UUID"
        milestone_uuid: UUID

        "Assigned column UUID"
        column_uuid: UUID!
    ): Card!

    "Delete card"
    delete(
        "Card UUID"
        uuid: UUID!
    ): UUID

    "Update card details"
    update_details(
        "Card UUID"
        uuid: UUID!

        "New display name"
        name: String

        "New card description as Markdown"
        description: String

        "New assigned story points value"
        story_points: Int

        "New assignee UUIDs"
        assignee_uuids: [UUID!]

        "New deadline"
        deadline: DateTime

        "New tag UUIDs"
        tag_uuids: [UUID!]

        "New assigned milestone UUID"
        milestone_uuid: UUID

        "New assigned column UUID"
        column_uuid: UUID
    ): Card!

    "Move card to another position and shift all cards in between"
    move(
        "UUID of the moved card"
        uuid_from: UUID!

        "UUID of the card at the destination"
        uuid_to: UUID!
    ): [Card!]!

    "Move card to empty column"
    move_to_column(
        "Moved card UUID"
        card_uuid: UUID!

        "Destination column UUID"
        column_uuid: UUID!
    ): [Card!]!

    "Update custom text field"
    update_text_field(
        "Card UUID"
        card_uuid: UUID!

        "Field UUID"
        field_uuid: UUID!

        "New value"
        value: String!
    ): Card!

    "Update custom number field"
    update_number_field(
        "Card UUID"
        card_uuid: UUID!

        "Field UUID"
        field_uuid: UUID!

        "New value"
        value: Float!
    ): Card!

    "Update custom checkbox field"
    update_checkbox_field(
        "Card UUID"
        card_uuid: UUID!

        "Field UUID"
        field_uuid: UUID!

        "New value"
        value: Boolean!
    ): Card!

    "Update custom date field"
    update_date_field(
        "Card UUID"
        card_uuid: UUID!

        "Field UUID"
        field_uuid: UUID!

        "New value"
        value: DateTime!
    ): Card!

    "Update custom select field"
    update_select_field(
        "Card UUID"
        card_uuid: UUID!

        "Field UUID"
        field_uuid: UUID!

        "New value UUID"
        value_uuid: UUID!
    ): Card!
}